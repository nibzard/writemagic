apiVersion: v1
kind: ConfigMap
metadata:
  name: writemagic-config
  namespace: writemagic-ENVIRONMENT
  labels:
    app.kubernetes.io/name: writemagic
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: writemagic
data:
  # Environment configuration
  environment: "ENVIRONMENT"
  log-level: "info"
  rust-log: "info,writemagic=debug"
  
  # AWS configuration
  aws-region: "us-west-2"
  s3-bucket: "S3_BUCKET_NAME"
  
  # Application configuration
  port: "8080"
  health-port: "8081"
  max-connections: "100"
  
  # AI configuration
  ai-provider-timeout: "30"
  ai-max-retries: "3"
  ai-cache-ttl: "3600"
  
  # Database configuration (non-sensitive)
  database-pool-size: "10"
  database-timeout: "30"
  
  # Redis configuration (non-sensitive)
  redis-pool-size: "10"
  redis-timeout: "5"
  redis-ttl: "3600"
  
  # Feature flags
  feature-ai-caching: "true"
  feature-metrics: "true"
  feature-tracing: "true"
  
  # Performance tuning
  worker-threads: "4"
  blocking-threads: "8"
  
  # Security settings
  cors-origins: "https://app.writemagic.com,https://app-staging.writemagic.com"
  max-request-size: "10485760"  # 10MB
  rate-limit-requests: "1000"
  rate-limit-window: "3600"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: writemagic-monitoring-config
  namespace: writemagic-ENVIRONMENT
  labels:
    app.kubernetes.io/name: writemagic
    app.kubernetes.io/component: monitoring-config
    app.kubernetes.io/part-of: writemagic
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      - job_name: 'writemagic-backend'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - writemagic-ENVIRONMENT
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: writemagic-logging-config
  namespace: writemagic-ENVIRONMENT
  labels:
    app.kubernetes.io/name: writemagic
    app.kubernetes.io/component: logging-config
    app.kubernetes.io/part-of: writemagic
data:
  fluent.conf: |
    <source>
      @type tail
      @id in_tail_container_logs
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag raw.kubernetes.*
      read_from_head true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
          time_format %Y-%m-%dT%H:%M:%S.%N%:z
        </pattern>
      </parse>
    </source>
    
    <match raw.kubernetes.**>
      @type detect_exceptions
      @id detect_exceptions
      remove_tag_prefix raw
      message log
      stream stream
      multiline_flush_interval 5
      max_bytes 500000
      max_lines 1000
    </match>
    
    <filter kubernetes.**>
      @type kubernetes_metadata
      @id filter_kube_metadata
      kubernetes_url "#{ENV['FLUENT_FILTER_KUBERNETES_URL'] || 'https://' + ENV.fetch('KUBERNETES_SERVICE_HOST') + ':' + ENV.fetch('KUBERNETES_SERVICE_PORT') + '/api'}"
      verify_ssl "#{ENV['KUBERNETES_VERIFY_SSL'] || true}"
      ca_file "#{ENV['KUBERNETES_CA_FILE']}"
      skip_labels "#{ENV['FLUENT_KUBERNETES_METADATA_SKIP_LABELS'] || 'false'}"
      skip_container_metadata "#{ENV['FLUENT_KUBERNETES_METADATA_SKIP_CONTAINER_METADATA'] || 'false'}"
      skip_master_url "#{ENV['FLUENT_KUBERNETES_METADATA_SKIP_MASTER_URL'] || 'false'}"
      skip_namespace_metadata "#{ENV['FLUENT_KUBERNETES_METADATA_SKIP_NAMESPACE_METADATA'] || 'false'}"
    </filter>
    
    <filter kubernetes.**>
      @type record_transformer
      @id filter_containers
      enable_ruby true
      <record>
        hostname "#{Socket.gethostname}"
        namespace ${record["kubernetes"]["namespace_name"]}
        pod_name ${record["kubernetes"]["pod_name"]}
        container_name ${record["kubernetes"]["container_name"]}
        environment ENVIRONMENT
      </record>
    </filter>
    
    <match kubernetes.**>
      @type cloudwatch_logs
      @id out_cloudwatch_logs_containers
      region "#{ENV['AWS_REGION'] || 'us-west-2'}"
      log_group_name "/aws/eks/writemagic-ENVIRONMENT/application"
      log_stream_name_key container_name
      remove_log_stream_name_key true
      auto_create_stream true
      <buffer>
        flush_interval 5s
        chunk_limit_size 2m
        queued_chunks_limit_size 32
        retry_forever true
      </buffer>
    </match>