version: '3.8'

services:
  # Development environment
  writemagic-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: writemagic-dev
    volumes:
      - .:/workspace:cached
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/workspace/target
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - WRITEMAGIC_DEV_MODE=true
    ports:
      - "3000:3000"
      - "8080:8080"
    networks:
      - writemagic-network
    profiles:
      - development

  # CI testing environment
  writemagic-ci:
    build:
      context: .
      dockerfile: Dockerfile
      target: ci
    container_name: writemagic-ci
    environment:
      - RUST_LOG=info
      - CI=true
    volumes:
      - ./coverage:/app/coverage
    networks:
      - writemagic-network
    profiles:
      - ci

  # Production-like environment
  writemagic-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: writemagic-app
    environment:
      - RUST_LOG=info
      - WRITEMAGIC_ENV=production
    ports:
      - "8080:8080"
    volumes:
      - writemagic-data:/app/data
    networks:
      - writemagic-network
    restart: unless-stopped
    profiles:
      - production
    depends_on:
      - postgres
      - redis

  # Database for production-like testing
  postgres:
    image: postgres:15-alpine
    container_name: writemagic-postgres
    environment:
      POSTGRES_DB: writemagic
      POSTGRES_USER: writemagic
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - writemagic-network
    profiles:
      - production
      - database
    secrets:
      - postgres_password

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: writemagic-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - writemagic-network
    profiles:
      - production
      - cache

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: writemagic-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - writemagic-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: writemagic-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY__FILE=/run/secrets/grafana_secret_key
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - writemagic-network
    profiles:
      - monitoring
    depends_on:
      - prometheus
    secrets:
      - grafana_admin_password
      - grafana_secret_key

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: writemagic-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "6831:6831/udp"
      - "6832:6832/udp"
    networks:
      - writemagic-network
    profiles:
      - monitoring

  # Android emulator for testing
  android-emulator:
    image: budtmo/docker-android:emulator_11.0
    container_name: writemagic-android-emulator
    privileged: true
    environment:
      - EMULATOR_DEVICE=Samsung Galaxy S10
      - WEB_VNC=true
    ports:
      - "6080:6080"
      - "5554:5554"
      - "5555:5555"
    networks:
      - writemagic-network
    profiles:
      - mobile-testing

  # MinIO for S3-compatible object storage (development)
  minio:
    image: minio/minio:latest
    container_name: writemagic-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=writemagic
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_password
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - writemagic-network
    profiles:
      - storage
    secrets:
      - minio_password

  # Nginx for reverse proxy and load balancing
  nginx:
    image: nginx:alpine
    container_name: writemagic-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - writemagic-network
    profiles:
      - production
    depends_on:
      - writemagic-app

volumes:
  cargo-cache:
    driver: local
  target-cache:
    driver: local
  writemagic-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  minio-data:
    driver: local

networks:
  writemagic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

secrets:
  postgres_password:
    external: true
    name: writemagic_postgres_password
  minio_password:
    external: true
    name: writemagic_minio_password
  grafana_admin_password:
    external: true
    name: writemagic_grafana_admin_password
  grafana_secret_key:
    external: true
    name: writemagic_grafana_secret_key