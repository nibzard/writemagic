name: Dependency Management

on:
  schedule:
    # Run daily at 3 AM UTC to check for critical security updates
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        default: 'security'
        type: choice
        options:
          - security
          - major
          - minor
          - patch
          - all
      force_update:
        description: 'Force update even with breaking changes'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-dependency-analysis:
    name: Rust Dependency Analysis
    runs-on: ubuntu-latest
    outputs:
      security-updates: ${{ steps.security.outputs.updates }}
      dependency-report: ${{ steps.analysis.outputs.report }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependency management tools
        run: |
          cargo install cargo-audit --locked
          cargo install cargo-outdated --locked
          cargo install cargo-udeps --locked
          cargo install cargo-deny --locked
          cargo install cargo-machete --locked

      - name: Run comprehensive security audit
        id: security
        run: |
          echo "Running security audit..."
          cargo audit --json > security-audit.json
          
          VULNS=$(jq '.vulnerabilities.found | length' security-audit.json)
          echo "Found $VULNS security vulnerabilities"
          echo "updates=$VULNS" >> $GITHUB_OUTPUT
          
          if [ "$VULNS" -gt 0 ]; then
            echo "⚠️ Security vulnerabilities detected:"
            jq -r '.vulnerabilities.list[] | "- \(.package.name)@\(.package.version): \(.advisory.title)"' security-audit.json
          fi

      - name: Check for outdated dependencies
        run: |
          cargo outdated --format json > outdated-deps.json
          
          echo "=== Outdated Dependencies ==="
          jq -r '.dependencies[] | select(.latest != .project) | "- \(.name): \(.project) → \(.latest)"' outdated-deps.json

      - name: Find unused dependencies
        run: |
          cargo +nightly udeps --workspace > unused-deps.txt 2>&1 || true
          cargo machete --with-metadata > machete-report.txt

      - name: Analyze dependency tree
        id: analysis
        run: |
          # Generate dependency tree analysis
          cargo tree --format json > dependency-tree.json
          
          # Count total dependencies
          TOTAL_DEPS=$(jq '[.. | objects | select(has("dependencies")) | .dependencies[]] | length' dependency-tree.json)
          
          # Generate comprehensive report
          cat > dependency-report.md << EOF
          # Dependency Analysis Report
          
          ## Summary
          
          - **Total Dependencies**: $TOTAL_DEPS
          - **Security Vulnerabilities**: ${{ steps.security.outputs.updates }}
          - **Outdated Packages**: $(jq '[.dependencies[] | select(.latest != .project)] | length' outdated-deps.json)
          
          ## Security Issues
          
          $(if [ "${{ steps.security.outputs.updates }}" -gt 0 ]; then
            echo "⚠️ **CRITICAL**: Security vulnerabilities found!"
            jq -r '.vulnerabilities.list[] | "- **\(.package.name)@\(.package.version)**: \(.advisory.title) (Severity: \(.advisory.severity))"' security-audit.json
          else
            echo "✅ No security vulnerabilities detected"
          fi)
          
          ## Outdated Dependencies
          
          $(jq -r '.dependencies[] | select(.latest != .project) | "- **\(.name)**: \(.project) → \(.latest)"' outdated-deps.json)
          
          ## Recommendations
          
          1. Address security vulnerabilities immediately
          2. Update outdated dependencies in controlled batches
          3. Remove unused dependencies to reduce attack surface
          4. Monitor for new security advisories
          
          Generated on: $(date -u)
          EOF
          
          echo "report=dependency-report.md" >> $GITHUB_OUTPUT

      - name: Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: rust-dependency-analysis
          path: |
            security-audit.json
            outdated-deps.json
            unused-deps.txt
            machete-report.txt
            dependency-tree.json
            dependency-report.md
          retention-days: 30

  mobile-dependency-analysis:
    name: Mobile Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-deps-${{ hashFiles('**/*.gradle*') }}

      - name: Install OWASP Dependency Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip dependency-check-8.4.0-release.zip

      - name: Run Android dependency analysis
        run: |
          cd android
          chmod +x gradlew
          
          # Generate dependency report
          ./gradlew dependencies > android-dependencies.txt
          
          # Check for vulnerabilities
          ../dependency-check/bin/dependency-check.sh \
            --project "WriteMagic Android" \
            --scan . \
            --format JSON \
            --format HTML \
            --out dependency-check-android

      - name: Upload Android dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: android-dependency-analysis
          path: |
            android/android-dependencies.txt
            dependency-check-android/
          retention-days: 30

  automated-updates:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    needs: [rust-dependency-analysis]
    if: ${{ needs.rust-dependency-analysis.outputs.security-updates > '0' || github.event.inputs.update_type != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Configure Git
        run: |
          git config --global user.name "dependabot[bot]"
          git config --global user.email "dependabot[bot]@users.noreply.github.com"

      - name: Install cargo-edit
        run: cargo install cargo-edit --locked

      - name: Download dependency analysis
        uses: actions/download-artifact@v4
        with:
          name: rust-dependency-analysis
          path: analysis/

      - name: Apply security updates
        if: ${{ needs.rust-dependency-analysis.outputs.security-updates > '0' || github.event.inputs.update_type == 'security' }}
        run: |
          echo "Applying security updates..."
          
          # Parse security audit results and update vulnerable packages
          jq -r '.vulnerabilities.list[] | .package.name' analysis/security-audit.json | sort -u | while read package; do
            echo "Updating vulnerable package: $package"
            cargo update --package "$package"
          done

      - name: Apply regular updates
        if: ${{ github.event.inputs.update_type == 'minor' || github.event.inputs.update_type == 'patch' || github.event.inputs.update_type == 'all' }}
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type }}"
          
          case $UPDATE_TYPE in
            patch)
              cargo update --workspace
              ;;
            minor)
              jq -r '.dependencies[] | select(.latest != .project and (.latest | split(".")[1] | tonumber) > (.project | split(".")[1] | tonumber)) | .name' analysis/outdated-deps.json | while read package; do
                cargo upgrade --package "$package" --to-lockfile
              done
              ;;
            major)
              if [ "${{ github.event.inputs.force_update }}" == "true" ]; then
                cargo upgrade --workspace
              else
                echo "Major updates require explicit force flag"
              fi
              ;;
            all)
              if [ "${{ github.event.inputs.force_update }}" == "true" ]; then
                cargo upgrade --workspace
              else
                cargo update --workspace
              fi
              ;;
          esac

      - name: Test after updates
        run: |
          echo "Testing after dependency updates..."
          cargo check --workspace
          cargo test --workspace --lib

      - name: Create pull request for updates
        if: success()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(deps): automated dependency updates
            
            - Updated dependencies based on security analysis
            - Type: ${{ github.event.inputs.update_type || 'security' }}
            - Security vulnerabilities fixed: ${{ needs.rust-dependency-analysis.outputs.security-updates }}
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>
          title: "chore(deps): automated dependency updates (${{ github.event.inputs.update_type || 'security' }})"
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated dependency updates based on security analysis and maintenance requirements.
            
            ### Update Type: ${{ github.event.inputs.update_type || 'security' }}
            
            ### Changes
            - Security vulnerabilities addressed: ${{ needs.rust-dependency-analysis.outputs.security-updates }}
            - Updated packages according to dependency analysis
            - All tests pass after updates
            
            ### Review Checklist
            - [ ] Security vulnerabilities resolved
            - [ ] No breaking API changes
            - [ ] Tests pass on all platforms
            - [ ] Performance benchmarks within acceptable range
            
            🤖 This PR was generated automatically by the dependency management workflow.
          branch: automated-deps-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            security

  dependency-monitoring:
    name: Dependency Monitoring Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up dependency monitoring
        run: |
          # Create monitoring configuration
          cat > .github/dependency-monitoring.yml << EOF
          version: 1
          monitoring:
            rust:
              security_threshold: 0  # No security vulnerabilities allowed
              outdated_threshold: 10  # Alert if more than 10 outdated deps
              unused_threshold: 5     # Alert if more than 5 unused deps
            android:
              vulnerability_threshold: medium  # Alert on medium+ vulnerabilities
            workflows:
              daily_checks: true
              security_notifications: true
              auto_merge_patches: false  # Require manual review
          EOF

      - name: Create dependency dashboard
        run: |
          cat > dependency-dashboard.md << EOF
          # WriteMagic Dependency Dashboard
          
          ## Current Status
          
          - **Last Security Scan**: $(date -u)
          - **Security Vulnerabilities**: ${{ needs.rust-dependency-analysis.outputs.security-updates || '0' }}
          - **Automated Updates**: Enabled
          - **Manual Review Required**: For major version updates
          
          ## Monitoring Configuration
          
          - Daily security scans at 3 AM UTC
          - Automated patch-level updates for security issues
          - Weekly dependency freshness reports
          - Real-time vulnerability notifications
          
          ## Integration Points
          
          - **Dependabot**: Automated PR creation
          - **Security Advisories**: GitHub Security tab
          - **CI/CD Pipeline**: Dependency validation in all builds
          - **Quality Gates**: Dependency health checks
          
          ## Escalation Process
          
          1. **Critical Security Issues**: Immediate automated updates
          2. **Major Version Updates**: Manual review required
          3. **Breaking Changes**: Coordinated team review
          4. **License Conflicts**: Legal and technical review
          
          Updated: $(date -u)
          EOF

      - name: Upload monitoring configuration
        uses: actions/upload-artifact@v4
        with:
          name: dependency-monitoring-config
          path: |
            .github/dependency-monitoring.yml
            dependency-dashboard.md
          retention-days: 90