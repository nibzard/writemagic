name: WriteMagic Cross-Platform Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  integration-tests:
    name: Cross-Platform Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: writemagic_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: wasm32-unknown-unknown

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-integration-tests

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-app/tests/package-lock.json

    - name: Setup Java for Android
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config build-essential

    - name: Cache Android dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install Node.js dependencies for web tests
      run: |
        cd web-app/tests
        npm ci

    - name: Check Rust formatting
      run: cargo fmt --all -- --check

    - name: Run Rust linting
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Build Rust workspace
      run: cargo build --workspace --verbose

    - name: Run Rust unit tests
      run: cargo test --workspace --verbose

    - name: Build WASM target
      run: cargo build --package writemagic-wasm --target wasm32-unknown-unknown --profile wasm-dev

    - name: Test WASM compilation
      run: wasm-pack test --node core/wasm

    - name: Build Android app
      run: |
        cd android
        ./gradlew assembleDebug --no-daemon

    - name: Run Android unit tests
      run: |
        cd android
        ./gradlew test --no-daemon

    - name: Run web tests
      run: |
        cd web-app/tests
        npm run test:all

    - name: Run integration tests
      run: ./run-integration-tests.sh --timeout 30
      env:
        TEST_DATABASE_URL: postgres://postgres:postgres@localhost/writemagic_test
        AI_MOCK_ENABLED: true
        RUST_LOG: info

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results/

    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          target/coverage/
          web-app/tests/coverage/
          android/build/reports/

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Run performance benchmarks
      run: ./run-integration-tests.sh --performance --no-android --no-web --timeout 20

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          test-results/
          target/criterion/

  publish-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()

    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: test-results/**/*.xml
        comment_mode: create new
        check_name: "WriteMagic Integration Test Results"

    - name: Create test summary
      if: always()
      run: |
        echo "## WriteMagic Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        if [ -f "test-results/summary.json" ]; then
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          jq -r '"- **Total Tests:** " + (.total_tests | tostring)' test-results/summary.json >> $GITHUB_STEP_SUMMARY
          jq -r '"- **Passed:** " + (.passed | tostring)' test-results/summary.json >> $GITHUB_STEP_SUMMARY
          jq -r '"- **Failed:** " + (.failed | tostring)' test-results/summary.json >> $GITHUB_STEP_SUMMARY
          jq -r '"- **Success Rate:** " + (.success_rate | tostring) + "%"' test-results/summary.json >> $GITHUB_STEP_SUMMARY
          jq -r '"- **Duration:** " + (.duration_seconds | tostring) + " seconds"' test-results/summary.json >> $GITHUB_STEP_SUMMARY
        else
          echo "No test results found" >> $GITHUB_STEP_SUMMARY
        fi