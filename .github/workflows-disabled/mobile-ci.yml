name: Mobile CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'android/**'
      - 'ios/**'
      - 'ffi/**'
      - '.github/workflows/mobile-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'android/**'
      - 'ios/**'
      - 'ffi/**'
      - '.github/workflows/mobile-ci.yml'

jobs:
  android-build:
    name: Android Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Android targets
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-android-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev

      - name: Set up Android NDK
        run: |
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV

      - name: Build Rust FFI for Android
        run: |
          export CC_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export AR_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
          export CC_armv7_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang
          export AR_armv7_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
          export CC_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang
          export AR_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
          export CC_x86_64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang
          export AR_x86_64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
          
          cargo build --target aarch64-linux-android --package writemagic-ffi-android --release
          cargo build --target armv7-linux-androideabi --package writemagic-ffi-android --release
          cargo build --target i686-linux-android --package writemagic-ffi-android --release
          cargo build --target x86_64-linux-android --package writemagic-ffi-android --release

      - name: Copy native libraries
        run: |
          mkdir -p android/app/src/main/jniLibs/arm64-v8a
          mkdir -p android/app/src/main/jniLibs/armeabi-v7a
          mkdir -p android/app/src/main/jniLibs/x86
          mkdir -p android/app/src/main/jniLibs/x86_64
          
          cp target/aarch64-linux-android/release/libwritemagic_ffi_android.so android/app/src/main/jniLibs/arm64-v8a/
          cp target/armv7-linux-androideabi/release/libwritemagic_ffi_android.so android/app/src/main/jniLibs/armeabi-v7a/
          cp target/i686-linux-android/release/libwritemagic_ffi_android.so android/app/src/main/jniLibs/x86/
          cp target/x86_64-linux-android/release/libwritemagic_ffi_android.so android/app/src/main/jniLibs/x86_64/

      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew

      - name: Run ktlint
        run: |
          cd android
          ./gradlew ktlintCheck

      - name: Run Android unit tests
        run: |
          cd android
          ./gradlew testDebugUnitTest

      - name: Build Android debug APK
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Run Android instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          script: |
            cd android
            ./gradlew connectedDebugAndroidTest

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results
          path: |
            android/app/build/reports/tests/
            android/app/build/test-results/
          retention-days: 7

  android-lint:
    name: Android Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew

      - name: Run Android lint
        run: |
          cd android
          ./gradlew lintDebug

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-lint-results
          path: android/app/build/reports/lint-results-debug.html
          retention-days: 7

  ios-build:
    name: iOS Build & Test
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install iOS targets
        run: |
          rustup target add aarch64-apple-ios
          rustup target add x86_64-apple-ios
          rustup target add aarch64-apple-ios-sim

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-ios-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Rust FFI for iOS
        run: |
          cargo build --target aarch64-apple-ios --package writemagic-ffi-ios --release
          cargo build --target x86_64-apple-ios --package writemagic-ffi-ios --release
          cargo build --target aarch64-apple-ios-sim --package writemagic-ffi-ios --release

      - name: Create universal library
        run: |
          mkdir -p ios/libs
          lipo -create \
            target/x86_64-apple-ios/release/libwritemagic_ffi_ios.a \
            target/aarch64-apple-ios-sim/release/libwritemagic_ffi_ios.a \
            -output ios/libs/libwritemagic_ffi_ios_sim.a
          cp target/aarch64-apple-ios/release/libwritemagic_ffi_ios.a ios/libs/libwritemagic_ffi_ios_device.a

      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        run: |
          cd ios
          swiftlint

      - name: Build iOS app
        run: |
          cd ios
          xcodebuild -project WriteMagic.xcodeproj \
            -scheme WriteMagic \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            clean build

      - name: Run iOS unit tests
        run: |
          cd ios
          xcodebuild -project WriteMagic.xcodeproj \
            -scheme WriteMagic \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            test

      - name: Upload iOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            ios/build/
            ios/libs/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results
          path: ios/build/Logs/Test/
          retention-days: 7

  integration-tests:
    name: Cross-Platform Integration Tests
    runs-on: ubuntu-latest
    needs: [android-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-debug-apk
          path: artifacts/android/

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev

      - name: Run FFI integration tests
        run: |
          cargo test --package writemagic-ffi-android --features integration-tests
          cargo test --package writemagic-ffi-ios --features integration-tests

      - name: Test Android APK with FFI
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          script: |
            adb install artifacts/android/app-debug.apk
            # Run integration tests that verify FFI communication
            cd android
            ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.writemagic.integration.FFIIntegrationTest

  security-scan:
    name: Mobile Security Scan
    runs-on: ubuntu-latest
    needs: [android-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-debug-apk
          path: artifacts/android/

      - name: Run MobSF security scan
        uses: fundacaocerti/mobsf-action@v1.7.1
        with:
          input-file-path: artifacts/android/app-debug.apk
          mobsf-url: https://mobsf.live
          mobsf-api-key: ${{ secrets.MOBSF_API_KEY }}

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: mobsf-results.json
          retention-days: 30