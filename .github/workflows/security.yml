name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan on Mondays at 2 AM UTC

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-security:
    name: Rust Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run security audit
        run: cargo audit --json > audit-results.json

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rust-security-audit
          path: audit-results.json
          retention-days: 30

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Run cargo-deny
        run: cargo deny check

  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/rust@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-vulnerability-scan
          path: snyk-results.json
          retention-days: 30

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install detect-secrets
        run: pip3 install detect-secrets

      - name: Run secret scan
        run: |
          detect-secrets scan --all-files --baseline .secrets.baseline > secrets-scan.json
          detect-secrets audit .secrets.baseline

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: secrets-scan.json
          retention-days: 30

  code-scanning:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust', 'javascript' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  container-scanning:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    needs: [rust-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t writemagic:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'writemagic:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif

  mobile-security:
    name: Mobile Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Android APK
        run: |
          cd android
          chmod +x gradlew
          ./gradlew assembleDebug

      - name: Run Android security analysis
        run: |
          # Install MobSF CLI or similar tool
          pip3 install mobsfscan
          mobsfscan android/ --json > android-security.json

      - name: Upload Android security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-security-scan
          path: android-security.json
          retention-days: 30

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          cargo license --json > license-report.json
          cat license-report.json

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: license-report.json
          retention-days: 30

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [rust-security, dependency-scanning, secret-scanning, container-scanning, mobile-security, license-compliance]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: Generate security summary
        run: |
          cat > security-summary.md << 'EOF'
          # Security Scan Summary
          
          This report summarizes the security scan results for WriteMagic.
          
          ## Scan Results
          
          - **Rust Security Audit**: ${{ needs.rust-security.result }}
          - **Dependency Scanning**: ${{ needs.dependency-scanning.result }}
          - **Secret Scanning**: ${{ needs.secret-scanning.result }}
          - **Container Scanning**: ${{ needs.container-scanning.result }}
          - **Mobile Security**: ${{ needs.mobile-security.result }}
          - **License Compliance**: ${{ needs.license-compliance.result }}
          
          ## Artifacts
          
          All detailed scan results are available in the artifacts section of this workflow run.
          
          ## Recommendations
          
          1. Review any HIGH or CRITICAL vulnerabilities immediately
          2. Update dependencies with known vulnerabilities
          3. Address any secret leaks or hardcoded credentials
          4. Ensure all licenses are compatible with project requirements
          
          Generated on: $(date -u)
          EOF

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-report
          path: security-summary.md
          retention-days: 90

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Security Scan Results\n\n${summary}`
            });