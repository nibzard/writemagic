name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            NEW_VERSION=$(cargo set-version --bump $VERSION_TYPE --dry-run | grep "new version" | awk '{print $3}')
            cargo set-version --bump $VERSION_TYPE
          else
            NEW_VERSION="${GITHUB_REF#refs/tags/v}"
            cargo set-version $NEW_VERSION
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Android version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_CODE=$(date +%s)
          
          # Update Android version
          sed -i "s/versionName = \".*\"/versionName = \"$VERSION\"/" android/app/build.gradle.kts
          sed -i "s/versionCode = .*/versionCode = $VERSION_CODE/" android/app/build.gradle.kts

      - name: Update iOS version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Update iOS version in project.pbxproj would require more complex parsing
          # For now, we'll use a placeholder approach
          echo "iOS version update: $VERSION"

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
          ignorePreReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit version changes
        if: github.event_name == 'workflow_dispatch'
        run: |
          git add .
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.version }}"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin main --tags

  build-rust:
    name: Build Rust Binaries
    needs: prepare-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-linux-android
            os: ubuntu-latest
          - target: armv7-linux-androideabi
            os: ubuntu-latest
          - target: i686-linux-android
            os: ubuntu-latest
          - target: x86_64-linux-android
            os: ubuntu-latest
          - target: aarch64-apple-ios
            os: macos-latest
          - target: x86_64-apple-ios
            os: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev

      - name: Install Android NDK (Android targets)
        if: contains(matrix.target, 'android')
        run: |
          sudo apt-get install -y unzip
          wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          unzip android-ndk-r25c-linux.zip
          echo "ANDROID_NDK_HOME=$PWD/android-ndk-r25c" >> $GITHUB_ENV

      - name: Set Android environment variables
        if: contains(matrix.target, 'android')
        run: |
          case ${{ matrix.target }} in
            aarch64-linux-android)
              echo "CC_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
              echo "AR_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
              ;;
            armv7-linux-androideabi)
              echo "CC_armv7_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
              echo "AR_armv7_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
              ;;
            i686-linux-android)
              echo "CC_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang" >> $GITHUB_ENV
              echo "AR_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
              ;;
            x86_64-linux-android)
              echo "CC_x86_64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang" >> $GITHUB_ENV
              echo "AR_x86_64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
              ;;
          esac

      - name: Build release binaries
        run: |
          if [[ "${{ matrix.target }}" == *"android"* ]]; then
            cargo build --target ${{ matrix.target }} --package writemagic-ffi-android --release
          elif [[ "${{ matrix.target }}" == *"ios"* ]]; then
            cargo build --target ${{ matrix.target }} --package writemagic-ffi-ios --release
          else
            cargo build --workspace --target ${{ matrix.target }} --release
          fi

      - name: Package binaries
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../writemagic-${{ needs.prepare-release.outputs.version }}-${{ matrix.target }}.zip *.exe
          else
            tar czvf ../../../writemagic-${{ needs.prepare-release.outputs.version }}-${{ matrix.target }}.tar.gz *
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: writemagic-${{ matrix.target }}
          path: writemagic-${{ needs.prepare-release.outputs.version }}-${{ matrix.target }}.*

  build-android:
    name: Build Android Release
    needs: [prepare-release, build-rust]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download Android native libraries
        uses: actions/download-artifact@v4
        with:
          pattern: writemagic-*-linux-android
          merge-multiple: true

      - name: Extract and organize native libraries
        run: |
          mkdir -p android/app/src/main/jniLibs/arm64-v8a
          mkdir -p android/app/src/main/jniLibs/armeabi-v7a
          mkdir -p android/app/src/main/jniLibs/x86
          mkdir -p android/app/src/main/jniLibs/x86_64
          
          # Extract from downloaded artifacts and copy to appropriate directories
          # This would need proper extraction logic based on artifact structure

      - name: Build Android release APK
        run: |
          cd android
          chmod +x gradlew
          ./gradlew assembleRelease

      - name: Sign Android APK
        if: github.event_name != 'workflow_dispatch'
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: android/app/build/outputs/apk/release/

  build-ios:
    name: Build iOS Release
    needs: [prepare-release, build-rust]
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download iOS native libraries
        uses: actions/download-artifact@v4
        with:
          pattern: writemagic-*-apple-ios
          merge-multiple: true

      - name: Extract and organize native libraries
        run: |
          mkdir -p ios/libs
          # Extract from downloaded artifacts and create universal libraries

      - name: Build iOS release
        run: |
          cd ios
          xcodebuild -project WriteMagic.xcodeproj \
            -scheme WriteMagic \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            clean archive \
            -archivePath build/WriteMagic.xcarchive

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/WriteMagic.xcarchive \
            -exportPath build/ \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-release
          path: ios/build/*.ipa

  build-docker:
    name: Build Docker Images
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            writemagic/writemagic:${{ needs.prepare-release.outputs.version }}
            writemagic/writemagic:latest
            ghcr.io/writemagic/writemagic:${{ needs.prepare-release.outputs.version }}
            ghcr.io/writemagic/writemagic:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [prepare-release, build-rust, build-android, build-ios, build-docker]
    runs-on: ubuntu-latest
    if: always() && needs.prepare-release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: WriteMagic v${{ needs.prepare-release.outputs.version }}
          body: ${{ needs.prepare-release.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version, '-') }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.apk
            artifacts/**/*.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    needs: [create-release]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying WriteMagic v${{ needs.prepare-release.outputs.version }} to staging"
          # Add deployment scripts here

  deploy-production:
    name: Deploy to Production
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying WriteMagic v${{ needs.prepare-release.outputs.version }} to production"
          # Add production deployment scripts here

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'WriteMagic v${{ needs.prepare-release.outputs.version }} has been deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}